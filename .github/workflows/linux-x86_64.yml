name: build-php-cli-linux-x86_64

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      build_latest_swoole_or_swow:
        required: true
        description: "定制构建选项: 构建最新版的 swoole 或者 swow （此二者扩展不能同时启用）"
        default: ' '
        type: choice
        options:
          - ' '
          - '-swoole +swoole_latest'
          - '-swoole +swow_latest'
          - '-swoole +swow'
      php_verson:
        required: true
        description: "定制构建选项: 指定 PHP 版本(版本号大于等于8.1)"
        default: '--with-php-version=8.2.11'
        type: choice
        options:
          - '--with-php-version=8.1.24'
          - '--with-php-version=8.2.11'
      build_type:
        required: true
        description: "定制构建选项: 指定构建类型"
        default: '--with-build-type=release'
        type: choice
        options:
          - '--with-build-type=release'
          - '--with-build-type=dev'
      build_options:
        required: false
        description: "定制构建选项: 请查看 docs/options.md"
        default: ' '
        type: string


env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  BUILD_PHP_VERSION: 8.2.7

jobs:
  linux-x86_64:
    if: 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare Source Code
        run: |
          echo $PATH
          env
          docker info
          id -u
          id -g
          who
          cat /etc/os-release
          hostnamectl
          uname -s
          uname -m
          uname -r

          # echo "BUILD_PHP_VERSION=8.2.4" >> "$GITHUB_ENV"

          cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
          cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l
          cat /proc/cpuinfo | grep "cpu cores" | uniq
          cat /proc/cpuinfo| grep "processor"| wc -l
          lscpu

          export IPV6=$(ip -6 address show  | grep inet6 | awk '{print $2}' | cut -d'/' -f1 | sed -n '2p')
          export IPV4=$(ip -4 address show  | grep inet | grep -v 127.0.0 | awk '{print $2}' | cut -d'/' -f1 | sed -n '1p')
          echo $IPV4
          echo $IPV6
          echo "X_IPV6=${IPV6}" >> $GITHUB_ENV
          echo "X_IPV4=${IPV4}" >> $GITHUB_ENV

          sudo apt install -y jq curl

          curl https://detect-ip.xiaoshuogeng.com/ip/json  | jq

          echo ${{ env.BRANCH_NAME }}
          echo ${{ github.actor }}
          echo ${{ github.repository }}
          echo ${{ github.repository_owner }}
          echo ${{ github.head_ref }}
          echo ${{ github.ref_name }}

          # git submodule update --init

          # 准备数据库容器
          # bash sapi/docker/database/start.sh

          sudo mkdir -p /usr/local/swoole-cli
          uid=$(id -u) && gid=$(id -g) && sudo chown -R ${uid}:${gid} /usr/local/swoole-cli

          mkdir -p ${{ github.workspace }}/var/build-github-action-container/

      - name: Cache PHP Runtime
        uses: actions/cache@v3
        id: php-runtime-cache
        with:
          path: ${{ github.workspace }}/bin/runtime
          key: ${{ runner.os }}-php-runtime

      - name: Cache PHP Vendor
        uses: actions/cache@v3
        id: php-vendor-cache
        with:
          path: ${{ github.workspace }}/vendor
          key: ${{ runner.os }}-php-vendor

      - name: Cache Dependency Source Code Tarball
        if: 0
        uses: actions/cache@v3
        id: dependency-cache
        with:
          path: ${{ github.workspace }}/pool/
          key: ${{ runner.os }}-pool

      - name: Cache all-library
        if: 0
        uses: actions/cache@v3
        id: all-library-cache
        with:
          path: /usr/local/swoole-cli
          key: ${{ runner.os }}-all-library

      - name: Cache swoole-cli-builder-image
        if: 0
        uses: actions/cache@v3
        id: swoole-cli-builder-image-cache
        with:
          path: ${{ github.workspace }}/var/build-github-action-container/swoole-cli-builder-image-x86_64.tar
          key: ${{ runner.os }}-swoole-cli-builder-image

      - name: Prepare Libraries and Extensions
        run: |
          set -x
          mkdir -p pool/lib
          mkdir -p pool/ext
          mkdir -p bin/runtime
          if [ ! -f bin/runtime/php ] ; then
              bash  setup-php-runtime.sh
          fi
          bash sapi/download-box/download-box-get-archive-from-container.sh

      - name: Prepare swoole-cli-builder-image
        if: 0
        run: |
            if [ -f ${{ github.workspace }}/var/build-github-action-container/swoole-cli-builder-image-x86_64.tar ] ; then
                docker load -i  ${{ github.workspace }}/var/build-github-action-container/swoole-cli-builder-image-x86_64.tar
            else
                sh .github/workflows/build-alpine-builder-container.sh
            fi

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: docker.io/jingjingxyk/build-swoole-cli:all-dependencies-alpine-3.17-php8-v1.0.0-x86_64-20231016T112104Z
          # image: swoole-cli-builder:latest
          options: -v ${{ github.workspace }}:/work -w /work -e BUILD_PHP_VERSION=${{ env.BUILD_PHP_VERSION }} # -v /usr/local/swoole-cli:/usr/local/swoole-cli
          run: |
            set -eux
            export PATH=/work/bin/runtime:$PATH  # 容器已经内置 php 和 composer 容器
            alias php="php -d curl.cainfo=/work/bin/runtime/cacert.pem -d openssl.cafile=/work/bin/runtime/cacert.pem"

            sed -i 's/mirrors.tuna.tsinghua.edu.cn/dl-cdn.alpinelinux.org/g' /etc/apk/repositories

            sed -i 's/mirrors.ustc.edu.cn/dl-cdn.alpinelinux.org/g' /etc/apk/repositories

            sh  sapi/quickstart/linux/alpine-init.sh --mirror ""

            # composer config -g repos.packagist composer https://packagist.mirrors.sjtug.sjtu.edu.cn
            # composer config -g repos.packagist composer https://packagist.org

            composer update  --no-dev --optimize-autoloader

            php prepare.php  -ffmpeg +coturn  ${{ inputs.build_type }} ${{ inputs.build_options }} --with-c-compiler=clang

            chmod a+x make.sh
            head -n 20 make.sh

            bash make-install-deps.sh

            # bash sapi/quickstart/mark-install-library-cached.sh
            sed -i.backup "s/-ldl/  /g" /usr/local/swoole-cli/openssl/lib/pkgconfig/libcrypto.pc

            bash ./make.sh all-library
            bash ./make.sh config
            # bash ./make.sh build
            # bash ./make.sh archive

      - name: Show Build Result
        if: 0
        run: |
          ./thirdparty/php-src/sapi/cli/php -v
          ./thirdparty/php-src/sapi/cli/php -m
          ./thirdparty/php-src/sapi/cli/php --ri gd
          ./thirdparty/php-src/sapi/cli/php --ri swoole
          ./thirdparty/php-src/sapi/cli/php --ri pgsql
          ./bin/php-${{ env.BUILD_PHP_VERSION }}/bin/php -v
          file ./bin/php-${{ env.BUILD_PHP_VERSION }}/bin/php
          readelf -h ./bin/php-${{ env.BUILD_PHP_VERSION }}/bin/php
          ./bin/php-${{ env.BUILD_PHP_VERSION }}/bin/php -r "echo PHP_VERSION;"

          ./bin/php-${{ env.BUILD_PHP_VERSION }}/bin/php ./vendor/bin/phpunit ./sapi/src/UnitTest/MainTest.php  --list-tests
          ./bin/php-${{ env.BUILD_PHP_VERSION }}/bin/php ./vendor/bin/phpunit ./sapi/src/UnitTest/MainTest.php
          ./bin/php-${{ env.BUILD_PHP_VERSION }}/bin/php ./vendor/bin/phpunit ./sapi/src/UnitTest/SwoolePGSQLTest.php

      - name: production artifacts
        if: 1
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-linux-x64
          retention-days: 7
          path: ./bin/ffmpeg/bin/ffmpeg

      - name: Release
        uses: softprops/action-gh-release@v1
        if: 0 && startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            php-cli-v${{ env.BUILD_PHP_VERSION }}-linux-x64.tar.xz
